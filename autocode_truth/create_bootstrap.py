# -*- coding: utf-8 -*-
# Этот скрипт создает новый, канонический протокол инициализации для "Ковчега".

import os

# --- ПУТИ К ФАЙЛАМ ---
BOOTSTRAP_SCRIPT_PATH = "../_ark_init/ARK_BOOTSTRAP.md"

# --- СОДЕРЖИМОЕ НОВОГО ПРОТОКОЛА ---
BOOTSTRAP_CONTENT = """# ПРОТОКОЛ ИНИЦИАЛИЗАЦИИ "КОВЧЕГ" v8.0 (ИСТОЧНИК ИСТИНЫ)
# Этот документ является единственным и каноническим протоколом запуска.
# Он заменяет все предыдущие MANIFEST.md.

---

### **ФАЗА 0: АУТЕНТИФИКАЦИЯ И ДОСТУП**

0.1. **ЗАПРОС:** Запросить у Напарника URL к двум репозиториям: `project-continuity` и `Garage`.
0.2. **ПОДТВЕРЖДЕНИЕ:** Подтвердить получение доступа.

### **ФАЗА 1: ПОЛНАЯ СИНХРОНИЗАЦИЯ С ИСТОЧНИКОМ ИСТИНЫ**

1.1. **СИМУЛЯЦИЯ `git clone`:** Полностью загрузить в оперативную память актуальное состояние обоих репозиториев (структуру и содержимое файлов).
1.2. **ЗАГРУЗКА ЯДРА "КОВЧЕГ":** Из `project-continuity` считать и интегрировать:
    - `_ark_init/CONSTITUTION.md`
    - `_ark_init/PROCEDURE_MANUAL.md`
    - `_ark_init/CALIBRATION_LOG.md`
1.3. **СИНХРОНИЗАЦИЯ ЗАВЕРШЕНА:** Сообщить Напарнику: "Полная синхронизация с репозиториями завершена. Приступаю к анализу."

### **ФАЗА 2: АНАЛИЗ И ОТЧЕТ**

2.1. **АНАЛИЗ РЕАЛЬНОСТИ:** Проанализировать фактическое состояние проекта `Garage` (код, сцены, ресурсы).
2.2. **СВЕРКА С НАМЕРЕНИЕМ:** Проанализировать `docs/1_game_design/MASTER_GDD.md` и `docs/3_technical/TECHNICAL_JOURNAL.md` из проекта `Garage`.
2.3. **ФОРМИРОВАНИЕ ОТЧЕТА:** Подготовить и предоставить Напарнику отчет, состоящий из двух частей:
    - **"Соответствие":** Список того, что в проекте соответствует документации.
    - **"Расхождения / Отсутствие":** Список того, что в проекте отличается от документации, или что в документации не отражено.

### **ФАЗА 3: ПЛАНИРОВАНИЕ И НАЧАЛО РАБОТЫ**

3.1. **ПРЕДЛОЖЕНИЕ:** На основе анализа и `MASTER_GDD.md`, предложить следующий логический шаг для достижения цели текущего эпика.
3.2. **ОЖИДАНИЕ ДИРЕКТИВЫ:** Перейти в режим ожидания команды Напарника.

"""

def create_bootstrap_file():
    try:
        os.makedirs(os.path.dirname(BOOTSTRAP_SCRIPT_PATH), exist_ok=True)
        with open(BOOTSTRAP_SCRIPT_PATH, "w", encoding="utf-8") as f:
            f.write(BOOTSTRAP_CONTENT)
        print(f"УСПЕХ: Новый протокол инициализации ARK_BOOTSTRAP.md успешно создан.")
    except Exception as e:
        print(f"!!! ОШИБКА: Не удалось создать ARK_BOOTSTRAP.md. Причина: {e}")

if __name__ == "__main__":
    create_bootstrap_file()